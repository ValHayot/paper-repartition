import glob
import keep
import math
import os
import pytest
import keep
from partition import Partition
from block import Block

@pytest.fixture
def cleanup_blocks():
    yield
    for f in glob.glob('*.bin'):
        os.remove(f)

def test_inside():
    b = Block((4, 5, 6), (2, 4, 6))
    assert(b.inside((5, 8, 11)))
    assert(not b.inside((3, 5, 6)))
    assert(not b.inside((5, 10, 7)))


def test_offset():
    b = Block((1, 1, 1), (4, 5, 6))
    assert(b.offset((1, 1, 3)) == 2)
    assert(b.offset((2, 2, 2)) == 1+6+30)

    c = Block((1,2,3), (5, 6, 7))
    assert(c.offset((1, 2, 9))==6)
    assert(c.offset((1, 7, 3))==35)
    assert(c.offset((1, 7, 9))==41)
    assert(c.offset((2, 2, 3))==42)
    assert(c.offset((5, 7, 9))==math.prod(c.shape)-1)


def test_block_offsets():
    b = Block((1, 2, 3), (5, 6, 7))
    assert((b.block_offsets(b)) == (b.origin, b.shape, (((1, 2, 3), 0), ((5, 7, 9), 209))))
    c = Block((0, 0, 0), (4, 4, 4))
    assert(c.block_offsets(b) == (b.origin,
                                  (3, 2, 1),
                                  (((1, 2, 3), 27),
                                   ((1, 2, 3), 27),
                                   ((1, 3, 3), 31),
                                   ((1, 3, 3), 31),
                                   ((2, 2, 3), 43),
                                   ((2, 2, 3), 43),
                                   ((2, 3, 3), 47),
                                   ((2, 3, 3), 47),
                                   ((3, 2, 3), 59),
                                   ((3, 2, 3), 59),
                                   ((3, 3, 3), 63),
                                   ((3, 3, 3), 63))))
    d = Block((1, 2, 2), (4, 4, 4))
    assert(c.block_offsets(d) == (d.origin,
                                  (3, 2, 2),
                                  (((1, 2, 2), 26),
                                   ((1, 2, 3), 27),
                                   ((1, 3, 2), 30),
                                   ((1, 3, 3), 31),
                                   ((2, 2, 2), 42),
                                   ((2, 2, 3), 43),
                                   ((2, 3, 2), 46),
                                   ((2, 3, 3), 47),
                                   ((3, 2, 2), 58),
                                   ((3, 2, 3), 59),
                                   ((3, 3, 2), 62),
                                   ((3, 3, 3), 63))))
    e = Block((1, 2, 1), (4, 4, 4))
    assert(c.block_offsets(e) == (e.origin,
                                  (3, 2, 3),
                                  (((1, 2, 1), 25),
                                   ((1, 2, 3), 27),
                                   ((1, 3, 1), 29),
                                   ((1, 3, 3), 31),
                                   ((2, 2, 1), 41),
                                   ((2, 2, 3), 43),
                                   ((2, 3, 1), 45),
                                   ((2, 3, 3), 47),
                                   ((3, 2, 1), 57),
                                   ((3, 2, 3), 59),
                                   ((3, 3, 1), 61),
                                   ((3, 3, 3), 63))))

def test_write_to_shape_match(cleanup_blocks):

    b = Block((1, 2, 3), (5, 6, 7), fill='random', file_name='test.bin')
    l, _ = b.write_to(b)
    assert(l == math.prod(b.shape))

    with open(b.file_name, 'rb') as f:
        data = f.read()
    assert(data == b.data)
    os.remove(b.file_name)

def test_write_to_shape_mismatch(cleanup_blocks):
    b = Block((1, 2, 3), (5, 6, 7), fill='random', file_name='test.bin')
    c = Block((1, 2, 3), (5, 2, 7), file_name='block1.bin')
    d = Block((1, 4, 3), (5, 4, 7), file_name='block2.bin')
    l, _ = b.write_to(c)
    m, _ = b.write_to(d)
    assert(l + m == math.prod(b.shape))

    # Check content
    c.read()
    assert(c.data[:10] == b.data[:10])
    d.read()
    assert(d.data[-10:] == b.data[-10:])
    for fn in (c.file_name, d.file_name):
        os.remove(fn)

def test_read_from_shape_match(cleanup_blocks):
    b = Block((1, 2, 3), (5, 6, 7), fill='random', file_name='test.bin')
    b.write()

    l, _ = b.read_from(b)
    assert(l == math.prod(b.shape))

    with open(b.file_name, 'rb') as f:
        data = f.read()
    assert(data == b.data)
    os.remove(b.file_name)

def test_read_from_shape_mismatch(cleanup_blocks):
    b = Block((1, 2, 3), (5, 6, 7), fill='random', file_name='test.bin')
    c = Block((1, 2, 3), (5, 2, 7), fill='random', file_name='block1.bin')
    d = Block((1, 4, 3), (5, 4, 7), fill='random', file_name='block2.bin')
    c.write()
    d.write()
    l, _ = b.read_from(c)
    m, _ = b.read_from(d)
    assert(l + m == math.prod(b.shape))

    # Check content
    assert(c.data[:10] == b.data[:10])
    assert(d.data[-10:] == b.data[-10:])
    for fn in (c.file_name, d.file_name):
        os.remove(fn)

def test_integration_write_to_read_from(cleanup_blocks):
    b = Block((1, 2, 3), (5, 6, 7), fill='random', file_name='test.bin')
    c = Block((1, 2, 3), (5, 2, 7), file_name='block1.bin')
    d = Block((1, 4, 3), (5, 4, 7), file_name='block2.bin')
    l, _ = b.write_to(c)
    m, _ = b.write_to(d)

    original_data = bytearray()
    original_data[:] = b.data
    b.read_from(c)
    b.read_from(d)
    assert(b.data == original_data)
    for fn in (c.file_name, d.file_name):
        os.remove(fn)

def test_repartition_baseline(cleanup_blocks):
    array = Partition((2, 2, 2), name='array', fill='random')
    array.write()
    out_blocks = Partition((2, 1, 2), name='out', array=array)
    array.repartition(out_blocks, -1, keep.baseline)
    array.blocks[(0,0,0)][0].read()
    out_blocks.blocks[(0,0,0)][0].read()
    out_blocks.blocks[(0,1,0)][0].read()

    assert(array.blocks[(0,0,0)][0].data[:2] == out_blocks.blocks[(0,0,0)][0].data[:2])
    assert(array.blocks[(0,0,0)][0].data[2:4] == out_blocks.blocks[(0,1,0)][0].data[:2])
    assert(array.blocks[(0,0,0)][0].data[4:6] == out_blocks.blocks[(0,0,0)][0].data[2:4])
    assert(array.blocks[(0,0,0)][0].data[6:8] == out_blocks.blocks[(0,1,0)][0].data[2:4])

    rein_blocks = Partition((2, 2, 2), name='rein')
    out_blocks.repartition(rein_blocks, -1, keep.baseline)
    rein_blocks.blocks[(0,0,0)][0].read()

    print(array.blocks[(0,0,0)][0].data)
    print(rein_blocks.blocks[(0,0,0)][0].data)
    assert(array.blocks[(0,0,0)][0].data == rein_blocks.blocks[(0,0,0)][0].data)

def test_repartition_baseline_1(cleanup_blocks):
    array = Partition((5, 6, 7), name='array', fill='random')
    array.write()
    out_blocks = Partition((5, 3, 7), name='out', array=array)
    array.repartition(out_blocks, -1, keep.baseline)
    array.blocks[(0,0,0)][0].read()
    out_blocks.blocks[(0,0,0)][0].read()
    out_blocks.blocks[(0,3,0)][0].read()

    assert(array.blocks[(0,0,0)][0].data[:20] == out_blocks.blocks[(0,0,0)][0].data[:20])
    assert(array.blocks[(0,0,0)][0].data[-20:] == out_blocks.blocks[(0,3,0)][0].data[-20:])


    rein_blocks = Partition((5, 6, 7), name='rein')
    out_blocks.repartition(rein_blocks, -1, keep.baseline)
    rein_blocks.blocks[(0,0,0)][0].read()

    assert(array.blocks[(0,0,0)][0].data == rein_blocks.blocks[(0,0,0)][0].data)

def test_repartition_baseline_2(cleanup_blocks):
    array = Partition((10, 20, 30), name='array')
    in_blocks = Partition((10, 20, 30), name='in', array=array, fill='random')
    in_data = in_blocks.blocks[(0,0,0)][0].data
    in_blocks.write()
    out_blocks = Partition((10, 10, 15), name='out', array=array)
    in_blocks.repartition(out_blocks, -1, keep.baseline)

    rein_blocks = Partition((10, 20, 30), name='rein', array=array)
    out_blocks.repartition(rein_blocks, -1, keep.baseline)
    rein_blocks.blocks[(0,0,0)][0].read()
    rein_data = rein_blocks.blocks[(0,0,0)][0].data

    assert(rein_data == in_data)

def test_r_hat():
    array = Partition((3500, 3500, 3500), name='array')
    in_blocks = Partition((875, 875, 875), array=array, name='in')
    out_blocks = Partition((700, 875, 700), array=array, name='out')

    r_hat = keep.get_r_hat(in_blocks, out_blocks)
    assert(r_hat == (875, 1750, 875))

def test_divisors():
    assert(sorted(keep.divisors(10)) == [1, 2, 5])
    assert(sorted(keep.divisors(42)) == [1, 2, 3, 6, 7, 14, 21])

def test_candidate_read_shapes():
    array = Partition((3500, 3500, 3500), name='array')
    in_blocks = Partition((875, 875, 875), array=array, name='in')
    out_blocks = Partition((700, 875, 700), array=array, name='out')
    r_hat = keep.get_r_hat(in_blocks, out_blocks)
    read_shapes = keep.candidate_read_shapes(in_blocks, out_blocks, r_hat, array)
    assert(read_shapes == [(875, 1750, 875), (700, 1750, 875),
                           (500, 1750, 875), (350, 1750, 875),
                           (250, 1750, 875), (175, 1750, 875),
                           (140, 1750, 875), (125, 1750, 875),
                           (100, 1750, 875), (70, 1750, 875),
                           (50, 1750, 875), (35, 1750, 875),
                           (28, 1750, 875), (25, 1750, 875),
                           (20, 1750, 875), (14, 1750, 875),
                           (10, 1750, 875), (7, 1750, 875),
                           (5, 1750, 875), (4, 1750, 875),
                           (2, 1750, 875), (1, 1750, 875),
                           (875, 875, 875), (700, 875, 875),
                           (500, 875, 875), (350, 875, 875),
                           (250, 875, 875), (175, 875, 875),
                           (140, 875, 875), (125, 875, 875),
                           (100, 875, 875), (70, 875, 875),
                           (50, 875, 875), (35, 875, 875),
                           (28, 875, 875), (25, 875, 875),
                           (20, 875, 875), (14, 875, 875),
                           (10, 875, 875), (7, 875, 875),
                           (5, 875, 875), (4, 875, 875),
                           (2, 875, 875), (1, 875, 875),
                           (875, 700, 875), (700, 700, 875),
                           (500, 700, 875), (350, 700, 875), (250, 700, 875), (175, 700, 875), (140, 700, 875), (125, 700, 875), (100, 700, 875), (70, 700, 875), (50, 700, 875), (35, 700, 875), (28, 700, 875), (25, 700, 875), (20, 700, 875), (14, 700, 875), (10, 700, 875), (7, 700, 875), (5, 700, 875), (4, 700, 875), (2, 700, 875), (1, 700, 875), (875, 500, 875), (700, 500, 875), (500, 500, 875), (350, 500, 875), (250, 500, 875), (175, 500, 875), (140, 500, 875), (125, 500, 875), (100, 500, 875), (70, 500, 875), (50, 500, 875), (35, 500, 875), (28, 500, 875), (25, 500, 875), (20, 500, 875), (14, 500, 875), (10, 500, 875), (7, 500, 875), (5, 500, 875), (4, 500, 875), (2, 500, 875), (1, 500, 875), (875, 350, 875), (700, 350, 875), (500, 350, 875), (350, 350, 875), (250, 350, 875), (175, 350, 875), (140, 350, 875), (125, 350, 875), (100, 350, 875), (70, 350, 875), (50, 350, 875), (35, 350, 875), (28, 350, 875), (25, 350, 875), (20, 350, 875), (14, 350, 875), (10, 350, 875), (7, 350, 875), (5, 350, 875), (4, 350, 875), (2, 350, 875), (1, 350, 875), (875, 250, 875), (700, 250, 875), (500, 250, 875), (350, 250, 875), (250, 250, 875), (175, 250, 875), (140, 250, 875), (125, 250, 875), (100, 250, 875), (70, 250, 875), (50, 250, 875), (35, 250, 875), (28, 250, 875), (25, 250, 875), (20, 250, 875), (14, 250, 875), (10, 250, 875), (7, 250, 875), (5, 250, 875), (4, 250, 875), (2, 250, 875), (1, 250, 875), (875, 175, 875), (700, 175, 875), (500, 175, 875), (350, 175, 875), (250, 175, 875), (175, 175, 875), (140, 175, 875), (125, 175, 875), (100, 175, 875), (70, 175, 875), (50, 175, 875), (35, 175, 875), (28, 175, 875), (25, 175, 875), (20, 175, 875), (14, 175, 875), (10, 175, 875), (7, 175, 875), (5, 175, 875), (4, 175, 875), (2, 175, 875), (1, 175, 875), (875, 140, 875), (700, 140, 875), (500, 140, 875), (350, 140, 875), (250, 140, 875), (175, 140, 875), (140, 140, 875), (125, 140, 875), (100, 140, 875), (70, 140, 875), (50, 140, 875), (35, 140, 875), (28, 140, 875), (25, 140, 875), (20, 140, 875), (14, 140, 875), (10, 140, 875), (7, 140, 875), (5, 140, 875), (4, 140, 875), (2, 140, 875), (1, 140, 875), (875, 125, 875), (700, 125, 875), (500, 125, 875), (350, 125, 875), (250, 125, 875), (175, 125, 875), (140, 125, 875), (125, 125, 875), (100, 125, 875), (70, 125, 875), (50, 125, 875), (35, 125, 875), (28, 125, 875), (25, 125, 875), (20, 125, 875), (14, 125, 875), (10, 125, 875), (7, 125, 875), (5, 125, 875), (4, 125, 875), (2, 125, 875), (1, 125, 875), (875, 100, 875), (700, 100, 875), (500, 100, 875), (350, 100, 875), (250, 100, 875), (175, 100, 875), (140, 100, 875), (125, 100, 875), (100, 100, 875), (70, 100, 875), (50, 100, 875), (35, 100, 875), (28, 100, 875), (25, 100, 875), (20, 100, 875), (14, 100, 875), (10, 100, 875), (7, 100, 875), (5, 100, 875), (4, 100, 875), (2, 100, 875), (1, 100, 875), (875, 70, 875), (700, 70, 875), (500, 70, 875), (350, 70, 875), (250, 70, 875), (175, 70, 875), (140, 70, 875), (125, 70, 875), (100, 70, 875), (70, 70, 875), (50, 70, 875), (35, 70, 875), (28, 70, 875), (25, 70, 875), (20, 70, 875), (14, 70, 875), (10, 70, 875), (7, 70, 875), (5, 70, 875), (4, 70, 875), (2, 70, 875), (1, 70, 875), (875, 50, 875), (700, 50, 875), (500, 50, 875), (350, 50, 875), (250, 50, 875), (175, 50, 875), (140, 50, 875), (125, 50, 875), (100, 50, 875), (70, 50, 875), (50, 50, 875), (35, 50, 875), (28, 50, 875), (25, 50, 875), (20, 50, 875), (14, 50, 875), (10, 50, 875), (7, 50, 875), (5, 50, 875), (4, 50, 875), (2, 50, 875), (1, 50, 875), (875, 35, 875), (700, 35, 875), (500, 35, 875), (350, 35, 875), (250, 35, 875), (175, 35, 875), (140, 35, 875), (125, 35, 875), (100, 35, 875), (70, 35, 875), (50, 35, 875), (35, 35, 875), (28, 35, 875), (25, 35, 875), (20, 35, 875), (14, 35, 875), (10, 35, 875), (7, 35, 875), (5, 35, 875), (4, 35, 875), (2, 35, 875), (1, 35, 875), (875, 28, 875), (700, 28, 875), (500, 28, 875), (350, 28, 875), (250, 28, 875), (175, 28, 875), (140, 28, 875), (125, 28, 875), (100, 28, 875), (70, 28, 875), (50, 28, 875), (35, 28, 875), (28, 28, 875), (25, 28, 875), (20, 28, 875), (14, 28, 875), (10, 28, 875), (7, 28, 875), (5, 28, 875), (4, 28, 875), (2, 28, 875), (1, 28, 875), (875, 25, 875), (700, 25, 875), (500, 25, 875), (350, 25, 875), (250, 25, 875), (175, 25, 875), (140, 25, 875), (125, 25, 875), (100, 25, 875), (70, 25, 875), (50, 25, 875), (35, 25, 875), (28, 25, 875), (25, 25, 875), (20, 25, 875), (14, 25, 875), (10, 25, 875), (7, 25, 875), (5, 25, 875), (4, 25, 875), (2, 25, 875), (1, 25, 875), (875, 20, 875), (700, 20, 875), (500, 20, 875), (350, 20, 875), (250, 20, 875), (175, 20, 875), (140, 20, 875), (125, 20, 875), (100, 20, 875), (70, 20, 875), (50, 20, 875), (35, 20, 875), (28, 20, 875), (25, 20, 875), (20, 20, 875), (14, 20, 875), (10, 20, 875), (7, 20, 875), (5, 20, 875), (4, 20, 875), (2, 20, 875), (1, 20, 875), (875, 14, 875), (700, 14, 875), (500, 14, 875), (350, 14, 875), (250, 14, 875), (175, 14, 875), (140, 14, 875), (125, 14, 875), (100, 14, 875), (70, 14, 875), (50, 14, 875), (35, 14, 875), (28, 14, 875), (25, 14, 875), (20, 14, 875), (14, 14, 875), (10, 14, 875), (7, 14, 875), (5, 14, 875), (4, 14, 875), (2, 14, 875), (1, 14, 875), (875, 10, 875), (700, 10, 875), (500, 10, 875), (350, 10, 875), (250, 10, 875), (175, 10, 875), (140, 10, 875), (125, 10, 875), (100, 10, 875), (70, 10, 875), (50, 10, 875), (35, 10, 875), (28, 10, 875), (25, 10, 875), (20, 10, 875), (14, 10, 875), (10, 10, 875), (7, 10, 875), (5, 10, 875), (4, 10, 875), (2, 10, 875), (1, 10, 875), (875, 7, 875), (700, 7, 875), (500, 7, 875), (350, 7, 875), (250, 7, 875), (175, 7, 875), (140, 7, 875), (125, 7, 875), (100, 7, 875), (70, 7, 875), (50, 7, 875), (35, 7, 875), (28, 7, 875), (25, 7, 875), (20, 7, 875), (14, 7, 875), (10, 7, 875), (7, 7, 875), (5, 7, 875), (4, 7, 875), (2, 7, 875), (1, 7, 875), (875, 5, 875), (700, 5, 875), (500, 5, 875), (350, 5, 875), (250, 5, 875), (175, 5, 875), (140, 5, 875), (125, 5, 875), (100, 5, 875), (70, 5, 875), (50, 5, 875), (35, 5, 875), (28, 5, 875), (25, 5, 875), (20, 5, 875), (14, 5, 875), (10, 5, 875), (7, 5, 875), (5, 5, 875), (4, 5, 875), (2, 5, 875), (1, 5, 875), (875, 4, 875), (700, 4, 875), (500, 4, 875), (350, 4, 875), (250, 4, 875), (175, 4, 875), (140, 4, 875), (125, 4, 875), (100, 4, 875), (70, 4, 875), (50, 4, 875), (35, 4, 875), (28, 4, 875), (25, 4, 875), (20, 4, 875), (14, 4, 875), (10, 4, 875), (7, 4, 875), (5, 4, 875), (4, 4, 875), (2, 4, 875), (1, 4, 875), (875, 2, 875), (700, 2, 875), (500, 2, 875), (350, 2, 875), (250, 2, 875), (175, 2, 875), (140, 2, 875), (125, 2, 875), (100, 2, 875), (70, 2, 875), (50, 2, 875), (35, 2, 875), (28, 2, 875), (25, 2, 875), (20, 2, 875), (14, 2, 875), (10, 2, 875), (7, 2, 875), (5, 2, 875), (4, 2, 875), (2, 2, 875), (1, 2, 875), (875, 1, 875), (700, 1, 875), (500, 1, 875), (350, 1, 875), (250, 1, 875), (175, 1, 875), (140, 1, 875), (125, 1, 875), (100, 1, 875), (70, 1, 875), (50, 1, 875), (35, 1, 875), (28, 1, 875), (25, 1, 875), (20, 1, 875), (14, 1, 875), (10, 1, 875), (7, 1, 875), (5, 1, 875), (4, 1, 875), (2, 1, 875), (1, 1, 875)])

